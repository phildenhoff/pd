# Enable command auto-correction.
ENABLE_CORRECTION="true"
EDITOR=nvim

# Load homebrew autocomplete
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

HISTSIZE=1000000
SAVEHIST=1000000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS


export PATH=/usr/local/bin:/usr/local/sbin:$HOME/.local/bin:$PATH
# Include Node in path
export PATH="$HOME/.npm-packages/bin:$PATH"
# Add cargo / rust
export PATH=$PATH:$HOME/.cargo/bin
# Python
export PATH="/Users/phil/Library/Python/3.7/bin:/usr/local/opt/python/libexec/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"

{{- if eq .chezmoi.hostname "mimosa" }}
# Android
export ANDROID_HOME=/Users/phil/Library/Android/sdk
export PATH=$ANDROID_HOME/platform-tools:$PATH
export PATH=$ANDROID_HOME/tools:$PATH

# Ruby
export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
export PATH="/opt/homebrew/lib/ruby/gems/3.0.0/bin/:$PATH"
{{- end }}


# bindkey -v
export KEYTIMEOUT=1


zle -N zle-line-init
zle -N zle-keymap-select

# Jump words, like in bash
bindkey "^[[1;3C" forward-word
bindkey "^[[1;3D" backward-word


{{- if eq .chezmoi.hostname "mimosa" }}
# Johnny Decimal
cjdfunction() {
    # {1} is the number to search for
    pushd ~/Dropbox/*/*/${1}*
}
alias cjd=cjdfunction
{{- end }}


alias vim=nvim
alias v=nvim

{{- if eq .chezmoi.os "darwin" }}
# macOS-aliases
alias nv="~/Applications/Neovide.app/Contents/MacOS/neovide --multigrid"

# Open Finder in the current dir
alias here="open ."

[ -f "~/Library/Application Support/fzf/fzf.zsh" ] && source "~/Library/Application Support/fzf/fzf.zsh"

# secretive
export SSH_AUTH_SOCK=/Users/phil/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh

# Stop autocorrecting 'docker' to '.docker'
unsetopt correct_all

# GoFetch asdf
. /usr/local/opt/asdf/asdf.sh
. $(brew --prefix asdf)/asdf.sh
. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash

# Setting PATH for Python 3.8
export PATH="/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.poetry/bin:$PATH"
. /opt/homebrew/opt/asdf/asdf.sh
{{- end }}

# Better git aliases
alias gd="git diff"
alias ga="git add"
alias gc="git commit"
alias gulr="git pull --rebase"
alias gul="git pull"
alias glo="git log --oneline"
alias glos="git log --oneline --show-signature"
alias gai="git add --interactive"
alias gap="git add --patch"
alias gcan="git commit --amend --no-edit"
alias gca="git commit --amend"
alias gpnv="git push --no-verify"
alias gpfnv="git push --force-with-lease --no-verify"

# Use bat to replace cat
alias cat=bat

# Use lsd to replace ls
alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

# Chezmoi
alias cmoa='chezmoi add'
alias ce="chezmoi edit"
alias cmou="chezmoi update"
alias cmod="chezmoi diff"

# Replace 'find' with 'fd'
{{- if eq .chezmoi.os "darwin" }}
alias find="/opt/homebrew/bin/fd"
alias fd="/opt/homebrew/bin/fd"
{{- else if eq .chezmoi.os "linux" }}
alias find=$(which fdfind)
alias fd=$(which fdfind)
{{- end }}

# export PATH="/usr/local/opt/libarchive/bin:$PATH"


# add ALL the completions!
fpath=( ~/.config/zsh/completions $fpath )

# Fix dydlib in Python
#export DYLD_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_LIBRARY_PATH
{{- if eq .chezmoi.os "darwin" }}

# Load Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"
export PATH="/opt/homebrew/opt/unzip/bin:$PATH"
{{- end }}

eval "$(direnv hook zsh)"

# pyenv
if type pyenv &>/dev/null
then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

test -e "${HOME}/Library/Application Support/iTerm2/iterm2_shell_integration.zsh" && source "${HOME}/Library/Application Support/iTerm2/iterm2_shell_integration.zsh"

# Use custom hypersnazzy colors via Vivid
export LS_COLORS="$(vivid generate snazzy)"

# fzf all the things
## TMUX
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

## Vim!
### Open any file under current dir
vf() {
  local previewer
  previewer="bat --style=numbers --color=always {}"
  files="$(fzf --query="$1" --multi --select-1 --exit-0 --preview $previewer --preview-window right:60%)"
  if test -n "$files"; then
    echo "${EDITOR:-vim} \"$files\""
    print -s "${EDITOR:-vim} \"$files\""
    ${EDITOR:-vim} "$files"
  fi
}

### Open from current modified files in git repository
vfc() {
  files="$(git ls-files -m | fzf --multi --select-1 --exit-0)"
  if test -n "$files"; then
    echo "${EDITOR:-vim} \"$files\""
    print -s "${EDITOR:-vim} \"$files\""
    ${EDITOR:-vim} "$files"
  fi
}

{{- if eq .chezmoi.hostname "mimosa" }}
## VS Code (an extension of the Vim ones)
alias cf="EDITOR=code vf"
alias cfc="EDITOR=code vfc"
{{- end }}


# NVM
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
if [ -s "$NVM_DIR/nvm.sh" ];
then
  source "$NVM_DIR/nvm.sh" # This loads nvm

  # Auto load NVM version on dir entry
  autoload -U add-zsh-hook
  load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
        nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
fi

# Add GT completions
source $HOME/.config/zsh/completions/gt.zsh


{{- if eq .chezmoi.hostname "mimosa" }}
# Nix
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
{{- end }}

{{- if eq .chezmoi.hostname "mimosa" }}
# Use remote Docker
docker context use b52-remote
{{- end }}

# Add starship to make your prompt ⚡️ fast ⚡️
# Must be the last command in this file!
eval "$(starship init zsh)"
